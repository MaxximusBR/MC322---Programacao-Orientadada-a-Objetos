## Aula 1 - MC322
## Introdução aos Conceitos de Orientação a Objetos

# Motivação
- P.O.O existe desde a década de 1960
- A industria de software pode ser lenta a se atualizar, principalmente porque se os sistemas funcionam nem, é necessária uma boa razão para susbtitui-los.
- Crescimento significativo em Orientação de Objetos nos últimos 15 anos
- Object Wrappers: código orientado a objeto que inclui outros códigos por dentro
- Com o sucesso das linguagens Java, .NET, e outas, objetos estão tornando-se uma parte significante da equação tecnológica.

# Desenvolvimento Procedural
- Dicotomia Dados x Funções
- Em P.O.O. ao invés de substituir paradigmas de desenvolvimento de software, objetos representam uma resposta evolucionária.
- Programas estruturados usam estruturas complexas de dados, como arrays.
- Em linguagens como C++, estruturas compartilham muitas caracteristicas com objetos (classes)
- Objetos contêm dados (atributos) e comportamento (métodos)

# Aspectos Gerais de P.O.O
- A questão é tanto simples quanto complexa:
  a) Complexa: Aprender qualquer método de desenvolvimento de software não é trivial
  b) Simples: Pessoas já pensam sobre objetos

# Encapsulamento
- Data Hiding: dados são atributos e comportamentos são métodos. Restringir acesso a certos atributos e/ou métodos é chamado de data hiding.
- Quando outro objeto como myObject que ter acesso à soma de myInt1 e myInt2, ele envia a mensagem (chamada) ao objeto Sum: ele calcula a soma e retorna o valor a myObject
- A beleza desse sesign é que myObject não precisa saber como a soma é calculada

# O que exatamente é um objeto?
- Objetos: são blocos fundamentais de contrução de um programa orientado a objetos
- Métodos: Getters and Setters (suportam o conceito de data hiding). 
- Devido a outros objetos não poderem manipular diretamente o dado em outro objeto, os getters e setters provém acesso controlado a um dado de objeto.

# Método de Interface e Implementação
public class Person {
  // Interfaces
  public String getName();
  public void setName(String n);
  public String getAdress();
  public void setAdress(String adr):
}

# Diagrama UML de Classes
- Ferramentas de modelagem visual que oferece um mecanismo de criar e manipular classes usando Unified Modelling Language (UML).

# O que exatamente é uma Classe?
- Classes: em resumo, é um projeto (blueprint) de um objeto
- Quando você inicia um objeto, você usa uma classe como base para como o objeto é contruído
- Cada objeto tem seus próprios atributos e comportamentos

public class Person {
  // Interfaces
  public String name;
  public String address;
  // Métodos
  public String getName();  
}

# Métodos
- São as funções que implementam comportamentos requeridos por uma classe.
- Comportamentos internos sçao métodos privados que não são acessíveis que outros objetos.

# Encapsulamento & Data Hiding
- Encapsulamento é a possibilidade de esconder dados
- Dados privados: para um data hiding funcionar, todos os atributos devem ser declarados como privados

# Interfaces x Interfaces
- Interfaces para as classes são métodos públicos




